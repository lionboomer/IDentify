const puppeteer = require("puppeteer");
const fs = require("fs");

const LOG_LEVELS = {
  NONE: 0,
  SHORT: 1,
  FULL: 2,
};

let currentLogLevel = LOG_LEVELS.SHORT; // Setzen Sie dies auf das gewünschte Logging-Level

function log(level, ...messages) {
  if (level <= currentLogLevel) {
    console.log(...messages);
  }
}

async function getBrowserData(page) {
  log(LOG_LEVELS.FULL, "Collecting Browser data...");

  // Hier sammeln Sie Ihre Browser-Daten...
  // Dies ist nur ein Beispiel, Sie müssen es an Ihre Bedürfnisse anpassen
  const browserData = await page.evaluate(() => {
    return {
      userAgent: navigator.userAgent,
      language: navigator.language,
      platform: navigator.platform,
    };
  });
  await browser.close();
  log(LOG_LEVELS.FULL, "Browser data collected:", browserData);
  return browserData;
}

process.on('exit', () => {
  if (browser) {
    console.log('Closing browser...');
    browser.close();
  }
});

run().catch(console.error);

function saveData(data) {
  const dataString = JSON.stringify(data, null, 2);
  fs.writeFileSync("fingerprint.log", dataString);
}

// Client-Seite (in JavaScript)
function getWebGLData() {
  const gl = document.createElement('canvas').getContext('webgl');
  const debugInfo = gl.getExtension('WEBGL_debug_renderer_info');
  return {
    vendor: gl.getParameter(debugInfo.UNMASKED_VENDOR_WEBGL),
    renderer: gl.getParameter(debugInfo.UNMASKED_RENDERER_WEBGL),
  };
}

const fingerprintData = {
  userAgent: navigator.userAgent,
  language: navigator.language,
  platform: navigator.platform,
  webGLData: getWebGLData(),
  // Hier können Sie weitere Daten hinzufügen...
};

fetch('/fingerprint', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(fingerprintData),
});
async function getCanvasData() {
  const browser = await puppeteer.launch({
    args: ["--no-sandbox", "--disable-setuid-sandbox"],
  });
  const page = await browser.newPage();
  await page.goto("http://localhost:3000");
  const canvasData = await page.evaluate(() => {
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");
    ctx.fillText("Hello, world!", 50, 50);
    return canvas.toDataURL();
  });
  await browser.close();
  log(LOG_LEVELS.SHORT, "Canvas data collected:", canvasData);
  return canvasData;
}

function saveData(data) {
    const dataString = JSON.stringify(data, null, 2);
    fs.writeFile('data.json', dataString, (err) => {
        if (err) {
            console.error('Error while saving data:', err);
        } else {
            console.log('Data saved successfully.');
        }
    });
}

async function collectData() {
  log(LOG_LEVELS.SHORT, "Starting data collection...", LOG_LEVELS.SHORT);

  log(LOG_LEVELS.SHORT, "Collecting WebGL data...");
  const webglData = await getWebGLData();
  log(LOG_LEVELS.FULL, "WebGL data collected:", webglData);

  log(LOG_LEVELS.SHORT, "Collecting Canvas data...");
  const canvasData = await getCanvasData();
  log(LOG_LEVELS.FULL, "Canvas data collected:", canvasData);

  log(LOG_LEVELS.SHORT,'Collecting Browser data...');
  const browserData = await getBrowserData();
  log(LOG_LEVELS.FULL,'Browser data collected:', browserData);

  log(LOG_LEVELS.SHORT, 'finished Data record')
  try {
    const data = { webglData, canvasData, browserData };

    log(LOG_LEVELS.SHORT, "Saving data...");
    saveData(data);
    log(LOG_LEVELS.SHORT, "Data saved.");

    log(LOG_LEVELS.SHORT, "Data collection completed.");
    return data;
  } catch (error) {
    console.error("An error occurred:", error);
  }
}

collectData()
  .then((data) => {
    log(LOG_LEVELS.FULL, "Data:", data);
    saveData(data);
  })
  .catch(console.error);
collectData().then(console.log);
